{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IMetisSBT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface IMetisSBT {\n    function claimSBT(uint256 _tokenId) external;\n\n    function addVote(uint256 _electionId, uint256 _tokenId) external;\n\n    event MetisSBTInitialized();\n    event MintSBT(address indexed to, uint256 tokenId, string uri);\n    event ContractURIUpdated(string contractUri);\n    event DefaultTokenURIUpdated(string _defaultTokenURI);\n    event MetisVoteSet(address indexed _metisVote);\n    event VoteAdded(uint256 _tokenId, uint256 _electionId);\n    event ClaimedSBT(address indexed user, uint256 tokenId);\n\n    error TransferForbidden(string message);\n    error VoteAlreadyEmitted(uint256 _electionId);\n}\n"
    },
    "contracts/interfaces/IMetisVote.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface IMetisVote {\n    struct Candidate {\n        bytes32 party;\n        bytes32 status;\n        uint256 votes;\n    }\n\n    struct Election {\n        bytes32 position; //GOVERNADOR || PRESIDENTE || DIPUTADO\n        uint256 startTime;\n        uint256 endTime;\n    }\n\n    function isActiveElection(uint256 _electionId) external view returns (bool);\n\n    function getCandidateVotes(uint256 _electionId, address _candidate) external view returns (uint256);\n\n    function getCandidatesByElection(uint256 _electionId) external view returns (address[] memory);\n\n    function getCandidatesLengthByElection(uint256 _electionId) external view returns (uint256);\n\n    function registerVoter(uint256 _tokenId) external;\n\n    function vote(uint256 _electionId, address _candidate) external;\n\n    event MetisVoteInitialized(address indexed _metisSBT);\n    event ElectionCreated(bytes32 _position, uint256 _startTime, uint256 _endTime);\n    event ElectionStartTimeUpdated(uint256 _electionId, uint256 _oldStartTime, uint256 _newStartTime);\n    event ElectionEndTimeUpdated(uint256 _electionId, uint256 _oldEndTime, uint256 _newEndTime);\n    event CandidateAdded(uint256 _electionId, bytes32 _party, address indexed _person);\n    event Vote(uint256 indexed _electionId, address indexed _candidate);\n    event VoterRegistered(address indexed voter, uint256 _tokenId);\n    event ElectionClosed(uint256 _electionId, address indexed _candidate, uint256 votes);\n\n    error NotACandidate(address _candidate);\n    error VoterNotRegistered();\n}\n"
    },
    "contracts/MetisVote.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nimport \"./interfaces/IMetisVote.sol\";\nimport \"./interfaces/IMetisSBT.sol\";\n\ncontract MetisVote is IMetisVote, Ownable {\n    using Counters for Counters.Counter;\n\n    address public immutable METIS_SBT;\n    Counters.Counter public _electionIdCounter;\n\n    bytes32 public constant CANDIDATE_STATUS = keccak256(\"CANDIDATE_STATUS\");\n    bytes32 public constant ELECTED_STATUS = keccak256(\"ELECTED_STATUS\");\n\n    /// @dev ElectionId => Election\n    mapping(uint256 => Election) public elections;\n\n    ///@dev ElectionId => user => Candidate\n    mapping(uint256 => mapping(address => Candidate)) public candidates;\n    mapping(uint256 => address[]) public candidatesPerElection;\n\n    ///@dev Voter => MetisSBT\n    mapping(address => uint256) public voters;\n\n    constructor(address _metisSBT) validAddress(_metisSBT) {\n        METIS_SBT = _metisSBT;\n        //Election ID must start with one and not zero.\n        _electionIdCounter.increment();\n        emit MetisVoteInitialized(_metisSBT);\n    }\n\n    /**************************** GETTERS  ****************************/\n\n    function isActiveElection(uint256 _electionId) external view returns (bool) {\n        return _isActiveElection(_electionId);\n    }\n\n    function getCandidateVotes(\n        uint256 _electionId,\n        address _candidate\n    ) external view validAddress(_candidate) returns (uint256) {\n        if (candidates[_electionId][_candidate].status == bytes32(0)) {\n            revert NotACandidate(_candidate);\n        }\n        return candidates[_electionId][_candidate].votes;\n    }\n\n    function getCandidatesByElection(uint256 _electionId) external view returns (address[] memory) {\n        return candidatesPerElection[_electionId];\n    }\n\n    function getCandidatesLengthByElection(uint256 _electionId) external view returns (uint256) {\n        return candidatesPerElection[_electionId].length;\n    }\n\n    /**************************** INTERFACE  ****************************/\n\n    function createElection(bytes32 _position, uint256 _startTime, uint256 _endTime) external onlyOwner {\n        _checkElection(_position, _startTime, _endTime);\n        Election memory e = Election({position: _position, startTime: _startTime, endTime: _endTime});\n        elections[_electionIdCounter.current()] = e;\n\n        _electionIdCounter.increment();\n\n        emit ElectionCreated(_position, _startTime, _endTime);\n    }\n\n    function changeStartTimeElection(uint256 _electionId, uint256 _startTime) external onlyOwner {\n        require(_electionId > 0, \"MetisVote: Invalid Election id\");\n        require(\n            elections[_electionId].startTime > 0 && elections[_electionId].endTime > 0,\n            \"MetisVote: Invalid Election\"\n        );\n        require(\n            _startTime >= block.timestamp && _startTime < elections[_electionId].endTime,\n            \"MetisVote: Invalid new start time\"\n        );\n        uint256 oldStartTime = elections[_electionId].startTime;\n        elections[_electionId].startTime = _startTime;\n\n        emit ElectionStartTimeUpdated(_electionId, oldStartTime, _startTime);\n    }\n\n    function changeEndTimeElection(uint256 _electionId, uint256 _endTime) external onlyOwner {\n        require(_electionId > 0, \"MetisVote: Invalid Election id\");\n        require(\n            elections[_electionId].startTime > 0 && elections[_electionId].endTime > 0,\n            \"MetisVote: Invalid Election\"\n        );\n        require(_endTime > elections[_electionId].startTime, \"MetisVote: Invalid new end time\");\n        uint256 oldEndTime = elections[_electionId].endTime;\n        elections[_electionId].endTime = _endTime;\n\n        emit ElectionEndTimeUpdated(_electionId, oldEndTime, _endTime);\n    }\n\n    function addCandidate(uint256 _electionId, bytes32 _party, address _person) external onlyOwner {\n        _addCandidate(_electionId, _party, _person);\n    }\n\n    function addCandidates(\n        uint256 _electionId,\n        bytes32[] memory _parties,\n        address[] memory _candidates\n    ) external onlyOwner {\n        require(_parties.length == _candidates.length, \"MetisVote: Lengths mismatch\");\n        for (uint256 i = 0; i < _candidates.length; i++) {\n            _addCandidate(_electionId, _parties[i], _candidates[i]);\n        }\n    }\n\n    function registerVoter(uint256 _tokenId) external {\n        require(IERC721(METIS_SBT).ownerOf(_tokenId) == msg.sender, \"MetisVote: Not owner of SBT\");\n        voters[msg.sender] = _tokenId;\n        emit VoterRegistered(msg.sender, _tokenId);\n    }\n\n    function vote(uint256 _electionId, address _candidate) external validAddress(_candidate) {\n        require(_isActiveElection(_electionId), \"MetisVote: Invalid Election\");\n        require(_isValidCandidate(_electionId, _candidate), \"MetisVote: Invalid Candidate\");\n        require(IERC721(METIS_SBT).balanceOf(msg.sender) == 1, \"MetisVote: No vote allowed\");\n\n        uint256 voterSBT = voters[msg.sender];\n        if (voterSBT == 0) {\n            revert VoterNotRegistered();\n        }\n\n        candidates[_electionId][_candidate].votes += 1;\n        IMetisSBT(METIS_SBT).addVote(_electionId, voterSBT);\n\n        emit Vote(_electionId, _candidate);\n    }\n\n    function closeElection(uint256 _electionId, address _candidate) external validAddress(_candidate) onlyOwner {\n        require(block.timestamp >= elections[_electionId].endTime, \"MetisVote: Election not finished\");\n        candidates[_electionId][_candidate].status = ELECTED_STATUS;\n        emit ElectionClosed(_electionId, _candidate, candidates[_electionId][_candidate].votes);\n    }\n\n    /**************************** INTERNALS  ****************************/\n\n    function _addCandidate(uint256 _electionId, bytes32 _party, address _person) internal onlyOwner {\n        require(block.timestamp < elections[_electionId].startTime, \"MetisVote: Election is already running\");\n        require(_party.length > 0, \"MetisVote: Invalid party\");\n        require(_person != address(0), \"MetisVote: Invalid candidate address\");\n\n        Candidate memory newCandidate = Candidate({party: _party, status: CANDIDATE_STATUS, votes: 0});\n\n        candidates[_electionId][_person] = newCandidate;\n        candidatesPerElection[_electionId].push(_person);\n\n        emit CandidateAdded(_electionId, _party, _person);\n    }\n\n    function _checkElection(bytes32 _position, uint256 _startTime, uint256 _endTime) internal view onlyOwner {\n        require(_position.length > 0, \"MetisVote: Invalid position\");\n        require(_startTime >= block.timestamp, \"MetisVote: Invalid start time\");\n        require(_endTime > _startTime, \"MetisVote: Invalid end time\");\n    }\n\n    function _isActiveElection(uint256 _electionId) internal view returns (bool) {\n        if (block.timestamp >= elections[_electionId].startTime && block.timestamp < elections[_electionId].endTime) {\n            return true;\n        }\n        return false;\n    }\n\n    function _isValidCandidate(uint256 _electionId, address _candidate) internal view returns (bool) {\n        if (candidates[_electionId][_candidate].status == bytes32(0)) {\n            return false;\n        }\n        return true;\n    }\n\n    /**************************** MODIFIERS  ****************************/\n\n    modifier validAddress(address _adr) {\n        require(_adr != address(0), \"MetisVote: Invalid address\");\n        _;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}