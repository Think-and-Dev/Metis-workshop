{
  "address": "0x1140de1dfa4677F673476781985DE025616b58d7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_metisSBT",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "NotACandidate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VoterNotRegistered",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_electionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_party",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_person",
          "type": "address"
        }
      ],
      "name": "CandidateAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_electionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        }
      ],
      "name": "ElectionClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_position",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "ElectionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_electionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldEndTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newEndTime",
          "type": "uint256"
        }
      ],
      "name": "ElectionEndTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_electionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newStartTime",
          "type": "uint256"
        }
      ],
      "name": "ElectionStartTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_metisSBT",
          "type": "address"
        }
      ],
      "name": "MetisVoteInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_electionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "Vote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "VoterRegistered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CANDIDATE_STATUS",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ELECTED_STATUS",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "METIS_SBT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_electionIdCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_electionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_party",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_person",
          "type": "address"
        }
      ],
      "name": "addCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_electionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_parties",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "_candidates",
          "type": "address[]"
        }
      ],
      "name": "addCandidates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "candidates",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "party",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "status",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "candidatesPerElection",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_electionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "changeEndTimeElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_electionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "changeStartTimeElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_electionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "closeElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_position",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "createElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "elections",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "position",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_electionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "getCandidateVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_electionId",
          "type": "uint256"
        }
      ],
      "name": "getCandidatesByElection",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_electionId",
          "type": "uint256"
        }
      ],
      "name": "getCandidatesLengthByElection",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_electionId",
          "type": "uint256"
        }
      ],
      "name": "isActiveElection",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "registerVoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_electionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "voters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6da03d628fcf4fba152ff2da82e42f0c0c12a0f720fd406e020ed12aa313d99a",
  "receipt": {
    "to": null,
    "from": "0x153073310327caA6abB76F735d115E5c8bA1617B",
    "contractAddress": "0x1140de1dfa4677F673476781985DE025616b58d7",
    "transactionIndex": 0,
    "gasUsed": "2517039",
    "logsBloom": "0x
    "blockHash": "0xa50c6e113afd3730701aa05f77516fc85acaa4062026ba2338534465197c9cc9",
    "transactionHash": "0x6da03d628fcf4fba152ff2da82e42f0c0c12a0f720fd406e020ed12aa313d99a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1020281,
        "transactionHash": "0x6da03d628fcf4fba152ff2da82e42f0c0c12a0f720fd406e020ed12aa313d99a",
        "address": "0x1140de1dfa4677F673476781985DE025616b58d7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000153073310327caa6abb76f735d115e5c8ba1617b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa50c6e113afd3730701aa05f77516fc85acaa4062026ba2338534465197c9cc9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1020281,
        "transactionHash": "0x6da03d628fcf4fba152ff2da82e42f0c0c12a0f720fd406e020ed12aa313d99a",
        "address": "0x1140de1dfa4677F673476781985DE025616b58d7",
        "topics": [
          "0x49bdc215204b786c36d309aaf7aeb42d29076c62750300be5fb6537f7a9e50cd",
          "0x00000000000000000000000025d9b7c8559b6056e93ef5df6c2752298c011dbd"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xa50c6e113afd3730701aa05f77516fc85acaa4062026ba2338534465197c9cc9"
      }
    ],
    "blockNumber": 1020281,
    "cumulativeGasUsed": "2517039",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x25D9B7c8559B6056e93Ef5Df6C2752298C011DbD"
  ],
  "numDeployments": 1,
  "solcInputHash": "1e2787d9559bc05a7ef1a07dc275b0c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_metisSBT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"NotACandidate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VoterNotRegistered\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_party\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_person\",\"type\":\"address\"}],\"name\":\"CandidateAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"name\":\"ElectionClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_position\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"ElectionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newEndTime\",\"type\":\"uint256\"}],\"name\":\"ElectionEndTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newStartTime\",\"type\":\"uint256\"}],\"name\":\"ElectionStartTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_metisSBT\",\"type\":\"address\"}],\"name\":\"MetisVoteInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"VoterRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CANDIDATE_STATUS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ELECTED_STATUS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"METIS_SBT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_electionIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_party\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_person\",\"type\":\"address\"}],\"name\":\"addCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_parties\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_candidates\",\"type\":\"address[]\"}],\"name\":\"addCandidates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"candidates\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"party\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"status\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidatesPerElection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"changeEndTimeElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"changeStartTimeElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"closeElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_position\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"createElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"elections\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"position\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"getCandidateVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"}],\"name\":\"getCandidatesByElection\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"}],\"name\":\"getCandidatesLengthByElection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"}],\"name\":\"isActiveElection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"registerVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"candidates\":{\"details\":\"ElectionId => user => Candidate\"},\"elections\":{\"details\":\"ElectionId => Election\"},\"voters\":{\"details\":\"Voter => MetisSBT\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MetisVote.sol\":\"MetisVote\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MetisVote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./interfaces/IMetisVote.sol\\\";\\nimport \\\"./interfaces/IMetisSBT.sol\\\";\\n\\ncontract MetisVote is IMetisVote, Ownable {\\n    using Counters for Counters.Counter;\\n\\n    address public immutable METIS_SBT;\\n    Counters.Counter public _electionIdCounter;\\n\\n    bytes32 public constant CANDIDATE_STATUS = keccak256(\\\"CANDIDATE_STATUS\\\");\\n    bytes32 public constant ELECTED_STATUS = keccak256(\\\"ELECTED_STATUS\\\");\\n\\n    /// @dev ElectionId => Election\\n    mapping(uint256 => Election) public elections;\\n\\n    ///@dev ElectionId => user => Candidate\\n    mapping(uint256 => mapping(address => Candidate)) public candidates;\\n    mapping(uint256 => address[]) public candidatesPerElection;\\n\\n    ///@dev Voter => MetisSBT\\n    mapping(address => uint256) public voters;\\n\\n    constructor(address _metisSBT) validAddress(_metisSBT) {\\n        METIS_SBT = _metisSBT;\\n        //Election ID must start with one and not zero.\\n        _electionIdCounter.increment();\\n        emit MetisVoteInitialized(_metisSBT);\\n    }\\n\\n    /**************************** GETTERS  ****************************/\\n\\n    function isActiveElection(uint256 _electionId) external view returns (bool) {\\n        return _isActiveElection(_electionId);\\n    }\\n\\n    function getCandidateVotes(\\n        uint256 _electionId,\\n        address _candidate\\n    ) external view validAddress(_candidate) returns (uint256) {\\n        if (candidates[_electionId][_candidate].status == bytes32(0)) {\\n            revert NotACandidate(_candidate);\\n        }\\n        return candidates[_electionId][_candidate].votes;\\n    }\\n\\n    function getCandidatesByElection(uint256 _electionId) external view returns (address[] memory) {\\n        return candidatesPerElection[_electionId];\\n    }\\n\\n    function getCandidatesLengthByElection(uint256 _electionId) external view returns (uint256) {\\n        return candidatesPerElection[_electionId].length;\\n    }\\n\\n    /**************************** INTERFACE  ****************************/\\n\\n    function createElection(bytes32 _position, uint256 _startTime, uint256 _endTime) external onlyOwner {\\n        _checkElection(_position, _startTime, _endTime);\\n        Election memory e = Election({position: _position, startTime: _startTime, endTime: _endTime});\\n        elections[_electionIdCounter.current()] = e;\\n\\n        _electionIdCounter.increment();\\n\\n        emit ElectionCreated(_position, _startTime, _endTime);\\n    }\\n\\n    function changeStartTimeElection(uint256 _electionId, uint256 _startTime) external onlyOwner {\\n        require(_electionId > 0, \\\"MetisVote: Invalid Election id\\\");\\n        require(\\n            elections[_electionId].startTime > 0 && elections[_electionId].endTime > 0,\\n            \\\"MetisVote: Invalid Election\\\"\\n        );\\n        require(\\n            _startTime >= block.timestamp && _startTime < elections[_electionId].endTime,\\n            \\\"MetisVote: Invalid new start time\\\"\\n        );\\n        uint256 oldStartTime = elections[_electionId].startTime;\\n        elections[_electionId].startTime = _startTime;\\n\\n        emit ElectionStartTimeUpdated(_electionId, oldStartTime, _startTime);\\n    }\\n\\n    function changeEndTimeElection(uint256 _electionId, uint256 _endTime) external onlyOwner {\\n        require(_electionId > 0, \\\"MetisVote: Invalid Election id\\\");\\n        require(\\n            elections[_electionId].startTime > 0 && elections[_electionId].endTime > 0,\\n            \\\"MetisVote: Invalid Election\\\"\\n        );\\n        require(_endTime > elections[_electionId].startTime, \\\"MetisVote: Invalid new end time\\\");\\n        uint256 oldEndTime = elections[_electionId].endTime;\\n        elections[_electionId].endTime = _endTime;\\n\\n        emit ElectionEndTimeUpdated(_electionId, oldEndTime, _endTime);\\n    }\\n\\n    function addCandidate(uint256 _electionId, bytes32 _party, address _person) external onlyOwner {\\n        _addCandidate(_electionId, _party, _person);\\n    }\\n\\n    function addCandidates(\\n        uint256 _electionId,\\n        bytes32[] memory _parties,\\n        address[] memory _candidates\\n    ) external onlyOwner {\\n        require(_parties.length == _candidates.length, \\\"MetisVote: Lengths mismatch\\\");\\n        for (uint256 i = 0; i < _candidates.length; i++) {\\n            _addCandidate(_electionId, _parties[i], _candidates[i]);\\n        }\\n    }\\n\\n    function registerVoter(uint256 _tokenId) external {\\n        require(IERC721(METIS_SBT).ownerOf(_tokenId) == msg.sender, \\\"MetisVote: Not owner of SBT\\\");\\n        voters[msg.sender] = _tokenId;\\n        emit VoterRegistered(msg.sender, _tokenId);\\n    }\\n\\n    function vote(uint256 _electionId, address _candidate) external validAddress(_candidate) {\\n        require(_isActiveElection(_electionId), \\\"MetisVote: Invalid Election\\\");\\n        require(_isValidCandidate(_electionId, _candidate), \\\"MetisVote: Invalid Candidate\\\");\\n        require(IERC721(METIS_SBT).balanceOf(msg.sender) == 1, \\\"MetisVote: No vote allowed\\\");\\n\\n        uint256 voterSBT = voters[msg.sender];\\n        if (voterSBT == 0) {\\n            revert VoterNotRegistered();\\n        }\\n\\n        candidates[_electionId][_candidate].votes += 1;\\n        IMetisSBT(METIS_SBT).addVote(_electionId, voterSBT);\\n\\n        emit Vote(_electionId, _candidate);\\n    }\\n\\n    function closeElection(uint256 _electionId, address _candidate) external validAddress(_candidate) onlyOwner {\\n        require(block.timestamp >= elections[_electionId].endTime, \\\"MetisVote: Election not finished\\\");\\n        candidates[_electionId][_candidate].status = ELECTED_STATUS;\\n        emit ElectionClosed(_electionId, _candidate, candidates[_electionId][_candidate].votes);\\n    }\\n\\n    /**************************** INTERNALS  ****************************/\\n\\n    function _addCandidate(uint256 _electionId, bytes32 _party, address _person) internal onlyOwner {\\n        require(\\n            elections[_electionId].startTime >= block.timestamp && block.timestamp < elections[_electionId].endTime,\\n            \\\"MetisVote: Election no longer valid\\\"\\n        );\\n        require(_party.length > 0, \\\"MetisVote: Invalid party\\\");\\n        require(_person != address(0), \\\"MetisVote: Invalid candidate address\\\");\\n\\n        Candidate memory newCandidate = Candidate({party: _party, status: CANDIDATE_STATUS, votes: 0});\\n\\n        candidates[_electionId][_person] = newCandidate;\\n        candidatesPerElection[_electionId].push(_person);\\n\\n        emit CandidateAdded(_electionId, _party, _person);\\n    }\\n\\n    function _checkElection(bytes32 _position, uint256 _startTime, uint256 _endTime) internal view onlyOwner {\\n        require(_position.length > 0, \\\"MetisVote: Invalid position\\\");\\n        require(_startTime >= block.timestamp, \\\"MetisVote: Invalid start time\\\");\\n        require(_endTime > _startTime, \\\"MetisVote: Invalid end time\\\");\\n    }\\n\\n    function _isActiveElection(uint256 _electionId) internal view returns (bool) {\\n        if (block.timestamp >= elections[_electionId].startTime && block.timestamp < elections[_electionId].endTime) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _isValidCandidate(uint256 _electionId, address _candidate) internal view returns (bool) {\\n        if (candidates[_electionId][_candidate].status == bytes32(0)) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    /**************************** MODIFIERS  ****************************/\\n\\n    modifier validAddress(address _adr) {\\n        require(_adr != address(0), \\\"MetisVote: Invalid address\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x777cee7d727ee628b07a092b69caaa2cec0fd113ccc15d4496963ecdc1666524\",\"license\":\"MIT\"},\"contracts/interfaces/IMetisSBT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IMetisSBT {\\n    function addVote(uint256 _electionId, uint256 _tokenId) external;\\n\\n    event MetisSBTInitialized();\\n    event MintSBT(address indexed to, uint256 tokenId, string uri);\\n    event ContractURIUpdated(string contractUri);\\n    event DefaultTokenURIUpdated(string _defaultTokenURI);\\n    event MetisVoteSet(address indexed _metisVote);\\n    event VoteAdded(uint256 _tokenId, uint256 _electionId);\\n    event ClaimedSBT(address indexed user, uint256 tokenId);\\n\\n    error TransferForbidden(string message);\\n}\\n\",\"keccak256\":\"0xa84a529e454fb4b2ef4978e46028a04b93696cbccdfebad8760009590e5944ba\",\"license\":\"MIT\"},\"contracts/interfaces/IMetisVote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IMetisVote {\\n    struct Candidate {\\n        bytes32 party;\\n        bytes32 status;\\n        uint256 votes;\\n    }\\n\\n    struct Election {\\n        bytes32 position; //GOVERNADOR || PRESIDENTE || DIPUTADO\\n        uint256 startTime;\\n        uint256 endTime;\\n    }\\n\\n    struct Ballotage {\\n        Candidate c1;\\n        Candidate c2;\\n    }\\n\\n    event MetisVoteInitialized(address indexed _metisSBT);\\n    event ElectionCreated(bytes32 _position, uint256 _startTime, uint256 _endTime);\\n    event ElectionStartTimeUpdated(uint256 _electionId, uint256 _oldStartTime, uint256 _newStartTime);\\n    event ElectionEndTimeUpdated(uint256 _electionId, uint256 _oldEndTime, uint256 _newEndTime);\\n    event CandidateAdded(uint256 _electionId, bytes32 _party, address indexed _person);\\n    event Vote(uint256 indexed _electionId, address indexed _candidate);\\n    event VoterRegistered(address indexed voter, uint256 _tokenId);\\n    event ElectionClosed(uint256 _electionId, address indexed _candidate, uint256 votes);\\n\\n    error NotACandidate(address _candidate);\\n    error VoterNotRegistered();\\n}\\n\",\"keccak256\":\"0x1fe44df9ddeb8ed4afebc4797935d01b467240bf697c080f74135d4b2fa74500\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002f4838038062002f488339818101604052810190620000379190620002ac565b620000576200004b6200016060201b60201c565b6200016860201b60201c565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000c1906200033f565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250506200011560016200022c60201b6200148e1760201c565b8173ffffffffffffffffffffffffffffffffffffffff167f49bdc215204b786c36d309aaf7aeb42d29076c62750300be5fb6537f7a9e50cd60405160405180910390a2505062000361565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6001816000016000828254019250508190555050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002748262000247565b9050919050565b620002868162000267565b81146200029257600080fd5b50565b600081519050620002a6816200027b565b92915050565b600060208284031215620002c557620002c462000242565b5b6000620002d58482850162000295565b91505092915050565b600082825260208201905092915050565b7f4d65746973566f74653a20496e76616c69642061646472657373000000000000600082015250565b600062000327601a83620002de565b91506200033482620002ef565b602082019050919050565b600060208201905081810360008301526200035a8162000318565b9050919050565b608051612bb662000392600039600081816105770152818161073a0152818161104901526113d70152612bb66000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063715018a6116100c3578063a13f2f8d1161007c578063a13f2f8d146103a0578063a3ec138d146103bc578063c736e294146103ec578063c9d2c45c14610408578063e54c785714610426578063f2fde38b146104565761014d565b8063715018a6146102f05780637a2d2311146102fa5780637f001325146103165780638351af231461033457806386b11d21146103525780638da5cb5b146103825761014d565b806353d0b8dc1161011557806353d0b8dc1461020657806354868d43146102245780635739e842146102565780635e6fef011461027257806365a7175b146102a45780636fa4ddb0146102d45761014d565b806302d947ef1461015257806305ea879c1461016e578063148b30051461019e57806340557d34146101ba5780634921bb86146101d6575b600080fd5b61016c60048036038101906101679190611af9565b610472565b005b61018860048036038101906101839190611af9565b61080f565b6040516101959190611b48565b60405180910390f35b6101b860048036038101906101b39190611b99565b610978565b005b6101d460048036038101906101cf9190611e08565b610990565b005b6101f060048036038101906101eb9190611e93565b610a40565b6040516101fd9190611f7e565b60405180910390f35b61020e610ae1565b60405161021b9190611b48565b60405180910390f35b61023e60048036038101906102399190611af9565b610aed565b60405161024d93929190611faf565b60405180910390f35b610270600480360381019061026b9190611fe6565b610b24565b005b61028c60048036038101906102879190611e93565b610cb8565b60405161029b93929190612026565b60405180910390f35b6102be60048036038101906102b99190611fe6565b610ce2565b6040516102cb919061206c565b60405180910390f35b6102ee60048036038101906102e99190611fe6565b610d30565b005b6102f8610ed0565b005b610314600480360381019061030f9190612087565b610ee4565b005b61031e610f9f565b60405161032b91906120da565b60405180910390f35b61033c610fc3565b60405161034991906120da565b60405180910390f35b61036c60048036038101906103679190611e93565b610fe7565b6040516103799190611b48565b60405180910390f35b61038a611007565b604051610397919061206c565b60405180910390f35b6103ba60048036038101906103b59190611e93565b611030565b005b6103d660048036038101906103d191906120f5565b6111cc565b6040516103e39190611b48565b60405180910390f35b61040660048036038101906104019190611af9565b6111e4565b005b6104106113d5565b60405161041d919061206c565b60405180910390f35b610440600480360381019061043b9190611e93565b6113f9565b60405161044d919061213d565b60405180910390f35b610470600480360381019061046b91906120f5565b61140b565b005b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036104e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d9906121b5565b60405180910390fd5b6104eb836114a4565b61052a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052190612221565b60405180910390fd5b61053483836114f9565b610573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056a9061228d565b60405180910390fd5b60017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016105ce919061206c565b602060405180830381865afa1580156105eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060f91906122c2565b1461064f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106469061233b565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081036106cd576040517f6f08c58700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016003600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000828254610731919061238a565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fcca991b85836040518363ffffffff1660e01b81526004016107939291906123be565b600060405180830381600087803b1580156107ad57600080fd5b505af11580156107c1573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16847f10a412bf229fbac2408912cb271b8ff9eb39eb72da91dd0c8accab0fb101113560405160405180910390a350505050565b600081600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610881576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610878906121b5565b60405180910390fd5b6000801b6003600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101540361091b57826040517f60e5a405000000000000000000000000000000000000000000000000000000008152600401610912919061206c565b60405180910390fd5b6003600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015491505092915050565b61098061156c565b61098b8383836115ea565b505050565b61099861156c565b80518251146109dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d390612433565b60405180910390fd5b60005b8151811015610a3a57610a27848483815181106109ff576109fe612453565b5b6020026020010151848481518110610a1a57610a19612453565b5b60200260200101516115ea565b8080610a3290612482565b9150506109df565b50505050565b606060046000838152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610ad557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610a8b575b50505050509050919050565b60018060000154905081565b6003602052816000526040600020602052806000526040600020600091509150508060000154908060010154908060020154905083565b610b2c61156c565b60008211610b6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6690612516565b60405180910390fd5b60006002600084815260200190815260200160002060010154118015610bab575060006002600084815260200190815260200160002060020154115b610bea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be190612221565b60405180910390fd5b60026000838152602001908152602001600020600101548111610c42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3990612582565b60405180910390fd5b6000600260008481526020019081526020016000206002015490508160026000858152602001908152602001600020600201819055507fa840cf473c20075448324c2c6fd14bbfd201f60f33db82754138db2c9b32b06f838284604051610cab939291906125a2565b60405180910390a1505050565b60026020528060005260406000206000915090508060000154908060010154908060020154905083565b60046020528160005260406000208181548110610cfe57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610d3861156c565b60008211610d7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7290612516565b60405180910390fd5b60006002600084815260200190815260200160002060010154118015610db7575060006002600084815260200190815260200160002060020154115b610df6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ded90612221565b60405180910390fd5b428110158015610e1b5750600260008381526020019081526020016000206002015481105b610e5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e519061264b565b60405180910390fd5b6000600260008481526020019081526020016000206001015490508160026000858152602001908152602001600020600101819055507fb9329cfd0a0c68a9e85594b8117007022c6bc52bc6d18acd79a11ac24327a53f838284604051610ec3939291906125a2565b60405180910390a1505050565b610ed861156c565b610ee2600061189e565b565b610eec61156c565b610ef7838383611962565b600060405180606001604052808581526020018481526020018381525090508060026000610f256001611a3b565b8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155905050610f5e600161148e565b7f0c678bc544e0dea7af707a389bef269590eb79358a3fed2d457ff671b188d587848484604051610f9193929190612026565b60405180910390a150505050565b7f40118949c6cba9e12fbf5d8eaee59ab938d3caf473fb213ac9233863f270c3e481565b7ffee2a06006e017d550b5fe2094312a8c4391962e4eb26b60da9a39d8408cd20581565b600060046000838152602001908152602001600020805490509050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016110a09190611b48565b602060405180830381865afa1580156110bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e19190612680565b73ffffffffffffffffffffffffffffffffffffffff1614611137576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112e906126f9565b60405180910390fd5b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167ff16ce2c2236e2c6e3df646f80d657bceef4cd7f3a240c47e82adfa17a5f47241826040516111c19190611b48565b60405180910390a250565b60056020528060005260406000206000915090505481565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611254576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124b906121b5565b60405180910390fd5b61125c61156c565b60026000848152602001908152602001600020600201544210156112b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ac90612765565b60405180910390fd5b7f40118949c6cba9e12fbf5d8eaee59ab938d3caf473fb213ac9233863f270c3e46003600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055508173ffffffffffffffffffffffffffffffffffffffff167f6c26b9313d4c1fb28d48cd360a1385ecd42d5cde22b0d38b6975e9fb875dca69846003600087815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546040516113c89291906123be565b60405180910390a2505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000611404826114a4565b9050919050565b61141361156c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611482576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611479906127f7565b60405180910390fd5b61148b8161189e565b50565b6001816000016000828254019250508190555050565b6000600260008381526020019081526020016000206001015442101580156114e15750600260008381526020019081526020016000206002015442105b156114ef57600190506114f4565b600090505b919050565b60008060001b6003600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154036115615760009050611566565b600190505b92915050565b611574611a49565b73ffffffffffffffffffffffffffffffffffffffff16611592611007565b73ffffffffffffffffffffffffffffffffffffffff16146115e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115df90612863565b60405180910390fd5b565b6115f261156c565b4260026000858152602001908152602001600020600101541015801561162d5750600260008481526020019081526020016000206002015442105b61166c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611663906128f5565b60405180910390fd5b6000602060ff16116116b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116aa90612961565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611722576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611719906129f3565b60405180910390fd5b600060405180606001604052808481526020017ffee2a06006e017d550b5fe2094312a8c4391962e4eb26b60da9a39d8408cd205815260200160008152509050806003600086815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101556040820151816002015590505060046000858152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167fc77a38df6f2b68b997a23e04f59bb77dffe925adffda65abed99bc2449f81a518585604051611890929190612a13565b60405180910390a250505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61196a61156c565b6000602060ff16116119b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a890612a88565b60405180910390fd5b428210156119f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119eb90612af4565b60405180910390fd5b818111611a36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2d90612b60565b60405180910390fd5b505050565b600081600001549050919050565b600033905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611a7881611a65565b8114611a8357600080fd5b50565b600081359050611a9581611a6f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ac682611a9b565b9050919050565b611ad681611abb565b8114611ae157600080fd5b50565b600081359050611af381611acd565b92915050565b60008060408385031215611b1057611b0f611a5b565b5b6000611b1e85828601611a86565b9250506020611b2f85828601611ae4565b9150509250929050565b611b4281611a65565b82525050565b6000602082019050611b5d6000830184611b39565b92915050565b6000819050919050565b611b7681611b63565b8114611b8157600080fd5b50565b600081359050611b9381611b6d565b92915050565b600080600060608486031215611bb257611bb1611a5b565b5b6000611bc086828701611a86565b9350506020611bd186828701611b84565b9250506040611be286828701611ae4565b9150509250925092565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611c3a82611bf1565b810181811067ffffffffffffffff82111715611c5957611c58611c02565b5b80604052505050565b6000611c6c611a51565b9050611c788282611c31565b919050565b600067ffffffffffffffff821115611c9857611c97611c02565b5b602082029050602081019050919050565b600080fd5b6000611cc1611cbc84611c7d565b611c62565b90508083825260208201905060208402830185811115611ce457611ce3611ca9565b5b835b81811015611d0d5780611cf98882611b84565b845260208401935050602081019050611ce6565b5050509392505050565b600082601f830112611d2c57611d2b611bec565b5b8135611d3c848260208601611cae565b91505092915050565b600067ffffffffffffffff821115611d6057611d5f611c02565b5b602082029050602081019050919050565b6000611d84611d7f84611d45565b611c62565b90508083825260208201905060208402830185811115611da757611da6611ca9565b5b835b81811015611dd05780611dbc8882611ae4565b845260208401935050602081019050611da9565b5050509392505050565b600082601f830112611def57611dee611bec565b5b8135611dff848260208601611d71565b91505092915050565b600080600060608486031215611e2157611e20611a5b565b5b6000611e2f86828701611a86565b935050602084013567ffffffffffffffff811115611e5057611e4f611a60565b5b611e5c86828701611d17565b925050604084013567ffffffffffffffff811115611e7d57611e7c611a60565b5b611e8986828701611dda565b9150509250925092565b600060208284031215611ea957611ea8611a5b565b5b6000611eb784828501611a86565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611ef581611abb565b82525050565b6000611f078383611eec565b60208301905092915050565b6000602082019050919050565b6000611f2b82611ec0565b611f358185611ecb565b9350611f4083611edc565b8060005b83811015611f71578151611f588882611efb565b9750611f6383611f13565b925050600181019050611f44565b5085935050505092915050565b60006020820190508181036000830152611f988184611f20565b905092915050565b611fa981611b63565b82525050565b6000606082019050611fc46000830186611fa0565b611fd16020830185611fa0565b611fde6040830184611b39565b949350505050565b60008060408385031215611ffd57611ffc611a5b565b5b600061200b85828601611a86565b925050602061201c85828601611a86565b9150509250929050565b600060608201905061203b6000830186611fa0565b6120486020830185611b39565b6120556040830184611b39565b949350505050565b61206681611abb565b82525050565b6000602082019050612081600083018461205d565b92915050565b6000806000606084860312156120a05761209f611a5b565b5b60006120ae86828701611b84565b93505060206120bf86828701611a86565b92505060406120d086828701611a86565b9150509250925092565b60006020820190506120ef6000830184611fa0565b92915050565b60006020828403121561210b5761210a611a5b565b5b600061211984828501611ae4565b91505092915050565b60008115159050919050565b61213781612122565b82525050565b6000602082019050612152600083018461212e565b92915050565b600082825260208201905092915050565b7f4d65746973566f74653a20496e76616c69642061646472657373000000000000600082015250565b600061219f601a83612158565b91506121aa82612169565b602082019050919050565b600060208201905081810360008301526121ce81612192565b9050919050565b7f4d65746973566f74653a20496e76616c696420456c656374696f6e0000000000600082015250565b600061220b601b83612158565b9150612216826121d5565b602082019050919050565b6000602082019050818103600083015261223a816121fe565b9050919050565b7f4d65746973566f74653a20496e76616c69642043616e64696461746500000000600082015250565b6000612277601c83612158565b915061228282612241565b602082019050919050565b600060208201905081810360008301526122a68161226a565b9050919050565b6000815190506122bc81611a6f565b92915050565b6000602082840312156122d8576122d7611a5b565b5b60006122e6848285016122ad565b91505092915050565b7f4d65746973566f74653a204e6f20766f746520616c6c6f776564000000000000600082015250565b6000612325601a83612158565b9150612330826122ef565b602082019050919050565b6000602082019050818103600083015261235481612318565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061239582611a65565b91506123a083611a65565b92508282019050808211156123b8576123b761235b565b5b92915050565b60006040820190506123d36000830185611b39565b6123e06020830184611b39565b9392505050565b7f4d65746973566f74653a204c656e67746873206d69736d617463680000000000600082015250565b600061241d601b83612158565b9150612428826123e7565b602082019050919050565b6000602082019050818103600083015261244c81612410565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061248d82611a65565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036124bf576124be61235b565b5b600182019050919050565b7f4d65746973566f74653a20496e76616c696420456c656374696f6e2069640000600082015250565b6000612500601e83612158565b915061250b826124ca565b602082019050919050565b6000602082019050818103600083015261252f816124f3565b9050919050565b7f4d65746973566f74653a20496e76616c6964206e657720656e642074696d6500600082015250565b600061256c601f83612158565b915061257782612536565b602082019050919050565b6000602082019050818103600083015261259b8161255f565b9050919050565b60006060820190506125b76000830186611b39565b6125c46020830185611b39565b6125d16040830184611b39565b949350505050565b7f4d65746973566f74653a20496e76616c6964206e65772073746172742074696d60008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b6000612635602183612158565b9150612640826125d9565b604082019050919050565b6000602082019050818103600083015261266481612628565b9050919050565b60008151905061267a81611acd565b92915050565b60006020828403121561269657612695611a5b565b5b60006126a48482850161266b565b91505092915050565b7f4d65746973566f74653a204e6f74206f776e6572206f66205342540000000000600082015250565b60006126e3601b83612158565b91506126ee826126ad565b602082019050919050565b60006020820190508181036000830152612712816126d6565b9050919050565b7f4d65746973566f74653a20456c656374696f6e206e6f742066696e6973686564600082015250565b600061274f602083612158565b915061275a82612719565b602082019050919050565b6000602082019050818103600083015261277e81612742565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006127e1602683612158565b91506127ec82612785565b604082019050919050565b60006020820190508181036000830152612810816127d4565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061284d602083612158565b915061285882612817565b602082019050919050565b6000602082019050818103600083015261287c81612840565b9050919050565b7f4d65746973566f74653a20456c656374696f6e206e6f206c6f6e67657220766160008201527f6c69640000000000000000000000000000000000000000000000000000000000602082015250565b60006128df602383612158565b91506128ea82612883565b604082019050919050565b6000602082019050818103600083015261290e816128d2565b9050919050565b7f4d65746973566f74653a20496e76616c69642070617274790000000000000000600082015250565b600061294b601883612158565b915061295682612915565b602082019050919050565b6000602082019050818103600083015261297a8161293e565b9050919050565b7f4d65746973566f74653a20496e76616c69642063616e6469646174652061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006129dd602483612158565b91506129e882612981565b604082019050919050565b60006020820190508181036000830152612a0c816129d0565b9050919050565b6000604082019050612a286000830185611b39565b612a356020830184611fa0565b9392505050565b7f4d65746973566f74653a20496e76616c696420706f736974696f6e0000000000600082015250565b6000612a72601b83612158565b9150612a7d82612a3c565b602082019050919050565b60006020820190508181036000830152612aa181612a65565b9050919050565b7f4d65746973566f74653a20496e76616c69642073746172742074696d65000000600082015250565b6000612ade601d83612158565b9150612ae982612aa8565b602082019050919050565b60006020820190508181036000830152612b0d81612ad1565b9050919050565b7f4d65746973566f74653a20496e76616c696420656e642074696d650000000000600082015250565b6000612b4a601b83612158565b9150612b5582612b14565b602082019050919050565b60006020820190508181036000830152612b7981612b3d565b905091905056fea26469706673582212207651c13f4cacaf696b1b841bf75f2cc63b30b670093509f87f2b89bb2664221a64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c8063715018a6116100c3578063a13f2f8d1161007c578063a13f2f8d146103a0578063a3ec138d146103bc578063c736e294146103ec578063c9d2c45c14610408578063e54c785714610426578063f2fde38b146104565761014d565b8063715018a6146102f05780637a2d2311146102fa5780637f001325146103165780638351af231461033457806386b11d21146103525780638da5cb5b146103825761014d565b806353d0b8dc1161011557806353d0b8dc1461020657806354868d43146102245780635739e842146102565780635e6fef011461027257806365a7175b146102a45780636fa4ddb0146102d45761014d565b806302d947ef1461015257806305ea879c1461016e578063148b30051461019e57806340557d34146101ba5780634921bb86146101d6575b600080fd5b61016c60048036038101906101679190611af9565b610472565b005b61018860048036038101906101839190611af9565b61080f565b6040516101959190611b48565b60405180910390f35b6101b860048036038101906101b39190611b99565b610978565b005b6101d460048036038101906101cf9190611e08565b610990565b005b6101f060048036038101906101eb9190611e93565b610a40565b6040516101fd9190611f7e565b60405180910390f35b61020e610ae1565b60405161021b9190611b48565b60405180910390f35b61023e60048036038101906102399190611af9565b610aed565b60405161024d93929190611faf565b60405180910390f35b610270600480360381019061026b9190611fe6565b610b24565b005b61028c60048036038101906102879190611e93565b610cb8565b60405161029b93929190612026565b60405180910390f35b6102be60048036038101906102b99190611fe6565b610ce2565b6040516102cb919061206c565b60405180910390f35b6102ee60048036038101906102e99190611fe6565b610d30565b005b6102f8610ed0565b005b610314600480360381019061030f9190612087565b610ee4565b005b61031e610f9f565b60405161032b91906120da565b60405180910390f35b61033c610fc3565b60405161034991906120da565b60405180910390f35b61036c60048036038101906103679190611e93565b610fe7565b6040516103799190611b48565b60405180910390f35b61038a611007565b604051610397919061206c565b60405180910390f35b6103ba60048036038101906103b59190611e93565b611030565b005b6103d660048036038101906103d191906120f5565b6111cc565b6040516103e39190611b48565b60405180910390f35b61040660048036038101906104019190611af9565b6111e4565b005b6104106113d5565b60405161041d919061206c565b60405180910390f35b610440600480360381019061043b9190611e93565b6113f9565b60405161044d919061213d565b60405180910390f35b610470600480360381019061046b91906120f5565b61140b565b005b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036104e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d9906121b5565b60405180910390fd5b6104eb836114a4565b61052a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052190612221565b60405180910390fd5b61053483836114f9565b610573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056a9061228d565b60405180910390fd5b60017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016105ce919061206c565b602060405180830381865afa1580156105eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060f91906122c2565b1461064f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106469061233b565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081036106cd576040517f6f08c58700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016003600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000828254610731919061238a565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fcca991b85836040518363ffffffff1660e01b81526004016107939291906123be565b600060405180830381600087803b1580156107ad57600080fd5b505af11580156107c1573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16847f10a412bf229fbac2408912cb271b8ff9eb39eb72da91dd0c8accab0fb101113560405160405180910390a350505050565b600081600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610881576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610878906121b5565b60405180910390fd5b6000801b6003600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101540361091b57826040517f60e5a405000000000000000000000000000000000000000000000000000000008152600401610912919061206c565b60405180910390fd5b6003600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015491505092915050565b61098061156c565b61098b8383836115ea565b505050565b61099861156c565b80518251146109dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d390612433565b60405180910390fd5b60005b8151811015610a3a57610a27848483815181106109ff576109fe612453565b5b6020026020010151848481518110610a1a57610a19612453565b5b60200260200101516115ea565b8080610a3290612482565b9150506109df565b50505050565b606060046000838152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610ad557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610a8b575b50505050509050919050565b60018060000154905081565b6003602052816000526040600020602052806000526040600020600091509150508060000154908060010154908060020154905083565b610b2c61156c565b60008211610b6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6690612516565b60405180910390fd5b60006002600084815260200190815260200160002060010154118015610bab575060006002600084815260200190815260200160002060020154115b610bea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be190612221565b60405180910390fd5b60026000838152602001908152602001600020600101548111610c42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3990612582565b60405180910390fd5b6000600260008481526020019081526020016000206002015490508160026000858152602001908152602001600020600201819055507fa840cf473c20075448324c2c6fd14bbfd201f60f33db82754138db2c9b32b06f838284604051610cab939291906125a2565b60405180910390a1505050565b60026020528060005260406000206000915090508060000154908060010154908060020154905083565b60046020528160005260406000208181548110610cfe57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610d3861156c565b60008211610d7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7290612516565b60405180910390fd5b60006002600084815260200190815260200160002060010154118015610db7575060006002600084815260200190815260200160002060020154115b610df6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ded90612221565b60405180910390fd5b428110158015610e1b5750600260008381526020019081526020016000206002015481105b610e5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e519061264b565b60405180910390fd5b6000600260008481526020019081526020016000206001015490508160026000858152602001908152602001600020600101819055507fb9329cfd0a0c68a9e85594b8117007022c6bc52bc6d18acd79a11ac24327a53f838284604051610ec3939291906125a2565b60405180910390a1505050565b610ed861156c565b610ee2600061189e565b565b610eec61156c565b610ef7838383611962565b600060405180606001604052808581526020018481526020018381525090508060026000610f256001611a3b565b8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155905050610f5e600161148e565b7f0c678bc544e0dea7af707a389bef269590eb79358a3fed2d457ff671b188d587848484604051610f9193929190612026565b60405180910390a150505050565b7f40118949c6cba9e12fbf5d8eaee59ab938d3caf473fb213ac9233863f270c3e481565b7ffee2a06006e017d550b5fe2094312a8c4391962e4eb26b60da9a39d8408cd20581565b600060046000838152602001908152602001600020805490509050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016110a09190611b48565b602060405180830381865afa1580156110bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e19190612680565b73ffffffffffffffffffffffffffffffffffffffff1614611137576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112e906126f9565b60405180910390fd5b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167ff16ce2c2236e2c6e3df646f80d657bceef4cd7f3a240c47e82adfa17a5f47241826040516111c19190611b48565b60405180910390a250565b60056020528060005260406000206000915090505481565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611254576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124b906121b5565b60405180910390fd5b61125c61156c565b60026000848152602001908152602001600020600201544210156112b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ac90612765565b60405180910390fd5b7f40118949c6cba9e12fbf5d8eaee59ab938d3caf473fb213ac9233863f270c3e46003600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055508173ffffffffffffffffffffffffffffffffffffffff167f6c26b9313d4c1fb28d48cd360a1385ecd42d5cde22b0d38b6975e9fb875dca69846003600087815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546040516113c89291906123be565b60405180910390a2505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000611404826114a4565b9050919050565b61141361156c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611482576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611479906127f7565b60405180910390fd5b61148b8161189e565b50565b6001816000016000828254019250508190555050565b6000600260008381526020019081526020016000206001015442101580156114e15750600260008381526020019081526020016000206002015442105b156114ef57600190506114f4565b600090505b919050565b60008060001b6003600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154036115615760009050611566565b600190505b92915050565b611574611a49565b73ffffffffffffffffffffffffffffffffffffffff16611592611007565b73ffffffffffffffffffffffffffffffffffffffff16146115e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115df90612863565b60405180910390fd5b565b6115f261156c565b4260026000858152602001908152602001600020600101541015801561162d5750600260008481526020019081526020016000206002015442105b61166c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611663906128f5565b60405180910390fd5b6000602060ff16116116b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116aa90612961565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611722576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611719906129f3565b60405180910390fd5b600060405180606001604052808481526020017ffee2a06006e017d550b5fe2094312a8c4391962e4eb26b60da9a39d8408cd205815260200160008152509050806003600086815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101556040820151816002015590505060046000858152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167fc77a38df6f2b68b997a23e04f59bb77dffe925adffda65abed99bc2449f81a518585604051611890929190612a13565b60405180910390a250505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61196a61156c565b6000602060ff16116119b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a890612a88565b60405180910390fd5b428210156119f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119eb90612af4565b60405180910390fd5b818111611a36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2d90612b60565b60405180910390fd5b505050565b600081600001549050919050565b600033905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611a7881611a65565b8114611a8357600080fd5b50565b600081359050611a9581611a6f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ac682611a9b565b9050919050565b611ad681611abb565b8114611ae157600080fd5b50565b600081359050611af381611acd565b92915050565b60008060408385031215611b1057611b0f611a5b565b5b6000611b1e85828601611a86565b9250506020611b2f85828601611ae4565b9150509250929050565b611b4281611a65565b82525050565b6000602082019050611b5d6000830184611b39565b92915050565b6000819050919050565b611b7681611b63565b8114611b8157600080fd5b50565b600081359050611b9381611b6d565b92915050565b600080600060608486031215611bb257611bb1611a5b565b5b6000611bc086828701611a86565b9350506020611bd186828701611b84565b9250506040611be286828701611ae4565b9150509250925092565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611c3a82611bf1565b810181811067ffffffffffffffff82111715611c5957611c58611c02565b5b80604052505050565b6000611c6c611a51565b9050611c788282611c31565b919050565b600067ffffffffffffffff821115611c9857611c97611c02565b5b602082029050602081019050919050565b600080fd5b6000611cc1611cbc84611c7d565b611c62565b90508083825260208201905060208402830185811115611ce457611ce3611ca9565b5b835b81811015611d0d5780611cf98882611b84565b845260208401935050602081019050611ce6565b5050509392505050565b600082601f830112611d2c57611d2b611bec565b5b8135611d3c848260208601611cae565b91505092915050565b600067ffffffffffffffff821115611d6057611d5f611c02565b5b602082029050602081019050919050565b6000611d84611d7f84611d45565b611c62565b90508083825260208201905060208402830185811115611da757611da6611ca9565b5b835b81811015611dd05780611dbc8882611ae4565b845260208401935050602081019050611da9565b5050509392505050565b600082601f830112611def57611dee611bec565b5b8135611dff848260208601611d71565b91505092915050565b600080600060608486031215611e2157611e20611a5b565b5b6000611e2f86828701611a86565b935050602084013567ffffffffffffffff811115611e5057611e4f611a60565b5b611e5c86828701611d17565b925050604084013567ffffffffffffffff811115611e7d57611e7c611a60565b5b611e8986828701611dda565b9150509250925092565b600060208284031215611ea957611ea8611a5b565b5b6000611eb784828501611a86565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611ef581611abb565b82525050565b6000611f078383611eec565b60208301905092915050565b6000602082019050919050565b6000611f2b82611ec0565b611f358185611ecb565b9350611f4083611edc565b8060005b83811015611f71578151611f588882611efb565b9750611f6383611f13565b925050600181019050611f44565b5085935050505092915050565b60006020820190508181036000830152611f988184611f20565b905092915050565b611fa981611b63565b82525050565b6000606082019050611fc46000830186611fa0565b611fd16020830185611fa0565b611fde6040830184611b39565b949350505050565b60008060408385031215611ffd57611ffc611a5b565b5b600061200b85828601611a86565b925050602061201c85828601611a86565b9150509250929050565b600060608201905061203b6000830186611fa0565b6120486020830185611b39565b6120556040830184611b39565b949350505050565b61206681611abb565b82525050565b6000602082019050612081600083018461205d565b92915050565b6000806000606084860312156120a05761209f611a5b565b5b60006120ae86828701611b84565b93505060206120bf86828701611a86565b92505060406120d086828701611a86565b9150509250925092565b60006020820190506120ef6000830184611fa0565b92915050565b60006020828403121561210b5761210a611a5b565b5b600061211984828501611ae4565b91505092915050565b60008115159050919050565b61213781612122565b82525050565b6000602082019050612152600083018461212e565b92915050565b600082825260208201905092915050565b7f4d65746973566f74653a20496e76616c69642061646472657373000000000000600082015250565b600061219f601a83612158565b91506121aa82612169565b602082019050919050565b600060208201905081810360008301526121ce81612192565b9050919050565b7f4d65746973566f74653a20496e76616c696420456c656374696f6e0000000000600082015250565b600061220b601b83612158565b9150612216826121d5565b602082019050919050565b6000602082019050818103600083015261223a816121fe565b9050919050565b7f4d65746973566f74653a20496e76616c69642043616e64696461746500000000600082015250565b6000612277601c83612158565b915061228282612241565b602082019050919050565b600060208201905081810360008301526122a68161226a565b9050919050565b6000815190506122bc81611a6f565b92915050565b6000602082840312156122d8576122d7611a5b565b5b60006122e6848285016122ad565b91505092915050565b7f4d65746973566f74653a204e6f20766f746520616c6c6f776564000000000000600082015250565b6000612325601a83612158565b9150612330826122ef565b602082019050919050565b6000602082019050818103600083015261235481612318565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061239582611a65565b91506123a083611a65565b92508282019050808211156123b8576123b761235b565b5b92915050565b60006040820190506123d36000830185611b39565b6123e06020830184611b39565b9392505050565b7f4d65746973566f74653a204c656e67746873206d69736d617463680000000000600082015250565b600061241d601b83612158565b9150612428826123e7565b602082019050919050565b6000602082019050818103600083015261244c81612410565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061248d82611a65565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036124bf576124be61235b565b5b600182019050919050565b7f4d65746973566f74653a20496e76616c696420456c656374696f6e2069640000600082015250565b6000612500601e83612158565b915061250b826124ca565b602082019050919050565b6000602082019050818103600083015261252f816124f3565b9050919050565b7f4d65746973566f74653a20496e76616c6964206e657720656e642074696d6500600082015250565b600061256c601f83612158565b915061257782612536565b602082019050919050565b6000602082019050818103600083015261259b8161255f565b9050919050565b60006060820190506125b76000830186611b39565b6125c46020830185611b39565b6125d16040830184611b39565b949350505050565b7f4d65746973566f74653a20496e76616c6964206e65772073746172742074696d60008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b6000612635602183612158565b9150612640826125d9565b604082019050919050565b6000602082019050818103600083015261266481612628565b9050919050565b60008151905061267a81611acd565b92915050565b60006020828403121561269657612695611a5b565b5b60006126a48482850161266b565b91505092915050565b7f4d65746973566f74653a204e6f74206f776e6572206f66205342540000000000600082015250565b60006126e3601b83612158565b91506126ee826126ad565b602082019050919050565b60006020820190508181036000830152612712816126d6565b9050919050565b7f4d65746973566f74653a20456c656374696f6e206e6f742066696e6973686564600082015250565b600061274f602083612158565b915061275a82612719565b602082019050919050565b6000602082019050818103600083015261277e81612742565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006127e1602683612158565b91506127ec82612785565b604082019050919050565b60006020820190508181036000830152612810816127d4565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061284d602083612158565b915061285882612817565b602082019050919050565b6000602082019050818103600083015261287c81612840565b9050919050565b7f4d65746973566f74653a20456c656374696f6e206e6f206c6f6e67657220766160008201527f6c69640000000000000000000000000000000000000000000000000000000000602082015250565b60006128df602383612158565b91506128ea82612883565b604082019050919050565b6000602082019050818103600083015261290e816128d2565b9050919050565b7f4d65746973566f74653a20496e76616c69642070617274790000000000000000600082015250565b600061294b601883612158565b915061295682612915565b602082019050919050565b6000602082019050818103600083015261297a8161293e565b9050919050565b7f4d65746973566f74653a20496e76616c69642063616e6469646174652061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006129dd602483612158565b91506129e882612981565b604082019050919050565b60006020820190508181036000830152612a0c816129d0565b9050919050565b6000604082019050612a286000830185611b39565b612a356020830184611fa0565b9392505050565b7f4d65746973566f74653a20496e76616c696420706f736974696f6e0000000000600082015250565b6000612a72601b83612158565b9150612a7d82612a3c565b602082019050919050565b60006020820190508181036000830152612aa181612a65565b9050919050565b7f4d65746973566f74653a20496e76616c69642073746172742074696d65000000600082015250565b6000612ade601d83612158565b9150612ae982612aa8565b602082019050919050565b60006020820190508181036000830152612b0d81612ad1565b9050919050565b7f4d65746973566f74653a20496e76616c696420656e642074696d650000000000600082015250565b6000612b4a601b83612158565b9150612b5582612b14565b602082019050919050565b60006020820190508181036000830152612b7981612b3d565b905091905056fea26469706673582212207651c13f4cacaf696b1b841bf75f2cc63b30b670093509f87f2b89bb2664221a64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "candidates": {
        "details": "ElectionId => user => Candidate"
      },
      "elections": {
        "details": "ElectionId => Election"
      },
      "voters": {
        "details": "Voter => MetisSBT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/MetisVote.sol:MetisVote",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3421,
        "contract": "contracts/MetisVote.sol:MetisVote",
        "label": "_electionIdCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)1683_storage"
      },
      {
        "astId": 3437,
        "contract": "contracts/MetisVote.sol:MetisVote",
        "label": "elections",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Election)4219_storage)"
      },
      {
        "astId": 3445,
        "contract": "contracts/MetisVote.sol:MetisVote",
        "label": "candidates",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Candidate)4212_storage))"
      },
      {
        "astId": 3450,
        "contract": "contracts/MetisVote.sol:MetisVote",
        "label": "candidatesPerElection",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 3455,
        "contract": "contracts/MetisVote.sol:MetisVote",
        "label": "voters",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Candidate)4212_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IMetisVote.Candidate)",
        "numberOfBytes": "32",
        "value": "t_struct(Candidate)4212_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Candidate)4212_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct IMetisVote.Candidate))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Candidate)4212_storage)"
      },
      "t_mapping(t_uint256,t_struct(Election)4219_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IMetisVote.Election)",
        "numberOfBytes": "32",
        "value": "t_struct(Election)4219_storage"
      },
      "t_struct(Candidate)4212_storage": {
        "encoding": "inplace",
        "label": "struct IMetisVote.Candidate",
        "members": [
          {
            "astId": 4207,
            "contract": "contracts/MetisVote.sol:MetisVote",
            "label": "party",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 4209,
            "contract": "contracts/MetisVote.sol:MetisVote",
            "label": "status",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 4211,
            "contract": "contracts/MetisVote.sol:MetisVote",
            "label": "votes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Counter)1683_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1682,
            "contract": "contracts/MetisVote.sol:MetisVote",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Election)4219_storage": {
        "encoding": "inplace",
        "label": "struct IMetisVote.Election",
        "members": [
          {
            "astId": 4214,
            "contract": "contracts/MetisVote.sol:MetisVote",
            "label": "position",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 4216,
            "contract": "contracts/MetisVote.sol:MetisVote",
            "label": "startTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4218,
            "contract": "contracts/MetisVote.sol:MetisVote",
            "label": "endTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}