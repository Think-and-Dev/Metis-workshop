{
  "address": "0x42c8214406430Cb040bDEF87d13f0C5B9b5ca301",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_metisSBT",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "NotACandidate",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_electionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_party",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_person",
          "type": "address"
        }
      ],
      "name": "CandidateAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_position",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "ElectionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_metisSBT",
          "type": "address"
        }
      ],
      "name": "MetisVoteInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_electionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "Vote",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CANDIDATE_STATUS",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ELECTED_STATUS",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "METIS_SBT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_electionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_party",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_person",
          "type": "address"
        }
      ],
      "name": "addCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_electionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_parties",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "_candidates",
          "type": "address[]"
        }
      ],
      "name": "addCandidates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_position",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "createElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_electionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "getCandidateVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_electionId",
          "type": "uint256"
        }
      ],
      "name": "isActiveElection",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_electionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe699f3796079d116589d89292f0e8cb638c869f157a69aa9b3e5bdc7c0e0e87b",
  "receipt": {
    "to": null,
    "from": "0x153073310327caA6abB76F735d115E5c8bA1617B",
    "contractAddress": "0x42c8214406430Cb040bDEF87d13f0C5B9b5ca301",
    "transactionIndex": 0,
    "gasUsed": "1745621",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000001200000000000000000000000000002000000020000000000000000000800000000000000000000000200000002400000000000000000000000000000000000000000000000000020020200000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000010000000000000000000000000000000000000000000000000000001020",
    "blockHash": "0x68414656f460a184d387f0055fb6cc441ea7b3147e79b5f69db5a0193da03575",
    "transactionHash": "0xe699f3796079d116589d89292f0e8cb638c869f157a69aa9b3e5bdc7c0e0e87b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1016444,
        "transactionHash": "0xe699f3796079d116589d89292f0e8cb638c869f157a69aa9b3e5bdc7c0e0e87b",
        "address": "0x42c8214406430Cb040bDEF87d13f0C5B9b5ca301",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000153073310327caa6abb76f735d115e5c8ba1617b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x68414656f460a184d387f0055fb6cc441ea7b3147e79b5f69db5a0193da03575"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1016444,
        "transactionHash": "0xe699f3796079d116589d89292f0e8cb638c869f157a69aa9b3e5bdc7c0e0e87b",
        "address": "0x42c8214406430Cb040bDEF87d13f0C5B9b5ca301",
        "topics": [
          "0x49bdc215204b786c36d309aaf7aeb42d29076c62750300be5fb6537f7a9e50cd",
          "0x00000000000000000000000072b957e4ef406b02d18ec0c4607236dc84e21b94"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x68414656f460a184d387f0055fb6cc441ea7b3147e79b5f69db5a0193da03575"
      }
    ],
    "blockNumber": 1016444,
    "cumulativeGasUsed": "1745621",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x72b957E4eF406b02D18EC0C4607236dC84e21b94"
  ],
  "numDeployments": 1,
  "solcInputHash": "a55128360dd22fa2de7e19d0872921de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_metisSBT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"NotACandidate\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_party\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_person\",\"type\":\"address\"}],\"name\":\"CandidateAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_position\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"ElectionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_metisSBT\",\"type\":\"address\"}],\"name\":\"MetisVoteInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CANDIDATE_STATUS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ELECTED_STATUS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"METIS_SBT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_party\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_person\",\"type\":\"address\"}],\"name\":\"addCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_parties\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_candidates\",\"type\":\"address[]\"}],\"name\":\"addCandidates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_position\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"createElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"getCandidateVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"}],\"name\":\"isActiveElection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MetisVote.sol\":\"MetisVote\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MetisVote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./interfaces/IMetisVote.sol\\\";\\nimport \\\"./interfaces/IMetisSBT.sol\\\";\\n\\ncontract MetisVote is IMetisVote, Ownable {\\n    using Counters for Counters.Counter;\\n\\n    address public immutable METIS_SBT;\\n    Counters.Counter private _electionIdCounter;\\n\\n    bytes32 public constant CANDIDATE_STATUS = keccak256(\\\"CANDIDATE_STATUS\\\");\\n    bytes32 public constant ELECTED_STATUS = keccak256(\\\"ELECTED_STATUS\\\");\\n\\n    mapping(uint256 => Election) elections;\\n    mapping(uint256 => mapping(address => Candidate)) candidates;\\n\\n    constructor(address _metisSBT) validAddress(_metisSBT) {\\n        METIS_SBT = _metisSBT;\\n        emit MetisVoteInitialized(_metisSBT);\\n    }\\n\\n    /**************************** GETTERS  ****************************/\\n\\n    function isActiveElection(uint256 _electionId) external view returns (bool) {\\n        return _isActiveElection(_electionId);\\n    }\\n\\n    function getCandidateVotes(\\n        uint256 _electionId,\\n        address _candidate\\n    ) external view validAddress(_candidate) returns (uint256) {\\n        if (candidates[_electionId][_candidate].status == bytes32(0)) {\\n            revert NotACandidate(_candidate);\\n        }\\n        return candidates[_electionId][_candidate].votes;\\n    }\\n\\n    /**************************** INTERFACE  ****************************/\\n\\n    function createElection(bytes32 _position, uint256 _startTime, uint256 _endTime) external onlyOwner {\\n        _checkElection(_position, _startTime, _endTime);\\n        Election memory e = Election({position: _position, startTime: _startTime, endTime: _endTime});\\n        elections[_electionIdCounter.current()] = e;\\n\\n        _electionIdCounter.increment();\\n        emit ElectionCreated(_position, _startTime, _endTime);\\n    }\\n\\n    function addCandidate(uint256 _electionId, bytes32 _party, address _person) external onlyOwner {\\n        _addCandidate(_electionId, _party, _person);\\n    }\\n\\n    function addCandidates(\\n        uint256 _electionId,\\n        bytes32[] memory _parties,\\n        address[] memory _candidates\\n    ) external onlyOwner {\\n        require(_parties.length == _candidates.length, \\\"MetisVote: Lengths mismatch\\\");\\n        for (uint256 i = 0; i < _candidates.length; i++) {\\n            _addCandidate(_electionId, _parties[i], _candidates[i]);\\n        }\\n    }\\n\\n    function vote(uint256 _electionId, address _candidate, uint256 _tokenId) external validAddress(_candidate) {\\n        require(_isActiveElection(_electionId), \\\"MetisVote: Invalid Election\\\");\\n        require(_isValidCandidate(_electionId, _candidate), \\\"MetisVote: Invalid Candidate\\\");\\n        require(IERC721(METIS_SBT).balanceOf(msg.sender) == 1, \\\"MetisVote: No vote allowed\\\");\\n        require(IERC721(METIS_SBT).ownerOf(_tokenId) == msg.sender, \\\"MetisVote: Not owner of the SBT\\\");\\n\\n        candidates[_electionId][_candidate].votes += 1;\\n        IMetisSBT(METIS_SBT).addVote(_electionId, _tokenId);\\n\\n        emit Vote(_electionId, _candidate);\\n    }\\n\\n    /*\\n    function closeElection(uint256 _electionId) external {\\n\\n    }\\n    */\\n    /**************************** INTERNALS  ****************************/\\n\\n    function _addCandidate(uint256 _electionId, bytes32 _party, address _person) internal onlyOwner {\\n        require(\\n            elections[_electionId].startTime >= block.timestamp && block.timestamp < elections[_electionId].endTime,\\n            \\\"MetisVote: Election no longer valid\\\"\\n        );\\n        require(_party.length > 0, \\\"MetisVote: Invalid party\\\");\\n        require(_person != address(0), \\\"MetisVote: Invalid candidate address\\\");\\n\\n        Candidate memory newCandidate = Candidate({party: _party, status: CANDIDATE_STATUS, votes: 0});\\n\\n        candidates[_electionId][_person] = newCandidate;\\n        emit CandidateAdded(_electionId, _party, _person);\\n    }\\n\\n    function _checkElection(bytes32 _position, uint256 _startTime, uint256 _endTime) internal view onlyOwner {\\n        require(_position.length > 0, \\\"MetisVote: Invalid position\\\");\\n        require(block.timestamp >= _startTime, \\\"MetisVote: Invalid start time\\\");\\n        require(_startTime > _endTime, \\\"MetisVote: Invalid end time\\\");\\n    }\\n\\n    function _isActiveElection(uint256 _electionId) internal view returns (bool) {\\n        if (block.timestamp >= elections[_electionId].startTime && block.timestamp < elections[_electionId].endTime) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _isValidCandidate(uint256 _electionId, address _candidate) internal view returns (bool) {\\n        if (candidates[_electionId][_candidate].status == bytes32(0)) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    /**************************** MODIFIERS  ****************************/\\n\\n    modifier validAddress(address _adr) {\\n        require(_adr != address(0), \\\"MetisVote: Invalid address\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6788769cb1d883d86178fad42c604acd2398ac575aa3983798e976beafc5da0e\",\"license\":\"MIT\"},\"contracts/interfaces/IMetisSBT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IMetisSBT {\\n    function addVote(uint256 _electionId, uint256 _tokenId) external;\\n\\n    event MetisSBTInitialized();\\n    event MintSBT(address indexed to, uint256 tokenId, string uri);\\n    event ContractURIUpdated(string contractUri);\\n    event DefaultTokenURIUpdated(string _defaultTokenURI);\\n    event MetisVoteSet(address indexed _metisVote);\\n    event VoteAdded(uint256 _tokenId, uint256 _electionId);\\n    event ClaimedSBT(address indexed user, uint256 tokenId);\\n\\n    error TransferForbidden(string message);\\n}\\n\",\"keccak256\":\"0xa84a529e454fb4b2ef4978e46028a04b93696cbccdfebad8760009590e5944ba\",\"license\":\"MIT\"},\"contracts/interfaces/IMetisVote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IMetisVote {\\n    struct Candidate {\\n        bytes32 party;\\n        bytes32 status;\\n        uint256 votes;\\n    }\\n\\n    struct Election {\\n        bytes32 position;\\n        uint256 startTime;\\n        uint256 endTime;\\n    }\\n\\n    struct Ballotage {\\n        Candidate c1;\\n        Candidate c2;\\n    }\\n\\n    event MetisVoteInitialized(address indexed _metisSBT);\\n    event ElectionCreated(bytes32 _position, uint256 _startTime, uint256 _endTime);\\n    event CandidateAdded(uint256 _electionId, bytes32 _party, address indexed _person);\\n    event Vote(uint256 indexed _electionId, address indexed _candidate);\\n\\n    error NotACandidate(address _candidate);\\n}\\n\",\"keccak256\":\"0x02885d6cd4e01096ffe6cb622d0f9bb2021a6fbe42e6d58cc0d4ab1c621657a9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200217f3803806200217f83398181016040528101906200003791906200027f565b620000576200004b6200014960201b60201c565b6200015160201b60201c565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000c19062000312565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff167f49bdc215204b786c36d309aaf7aeb42d29076c62750300be5fb6537f7a9e50cd60405160405180910390a2505062000334565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000247826200021a565b9050919050565b62000259816200023a565b81146200026557600080fd5b50565b60008151905062000279816200024e565b92915050565b60006020828403121562000298576200029762000215565b5b6000620002a88482850162000268565b91505092915050565b600082825260208201905092915050565b7f4d65746973566f74653a20496e76616c69642061646472657373000000000000600082015250565b6000620002fa601a83620002b1565b91506200030782620002c2565b602082019050919050565b600060208201905081810360008301526200032d81620002eb565b9050919050565b608051611e1a620003656000396000818161055d0152818161064e015281816107a901526109c00152611e1a6000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80637f001325116100715780637f001325146101635780638351af23146101815780638da5cb5b1461019f578063c9d2c45c146101bd578063e54c7857146101db578063f2fde38b1461020b576100b4565b806305ea879c146100b9578063148b3005146100e957806340557d34146101055780634de8737c14610121578063715018a61461013d5780637a2d231114610147575b600080fd5b6100d360048036038101906100ce919061106e565b610227565b6040516100e091906110bd565b60405180910390f35b61010360048036038101906100fe919061110e565b610390565b005b61011f600480360381019061011a919061137d565b6103a8565b005b61013b60048036038101906101369190611408565b610458565b005b61014561087e565b005b610161600480360381019061015c919061145b565b610892565b005b61016b61094d565b60405161017891906114bd565b60405180910390f35b610189610971565b60405161019691906114bd565b60405180910390f35b6101a7610995565b6040516101b491906114e7565b60405180910390f35b6101c56109be565b6040516101d291906114e7565b60405180910390f35b6101f560048036038101906101f09190611502565b6109e2565b604051610202919061154a565b60405180910390f35b61022560048036038101906102209190611565565b6109f4565b005b600081600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610299576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610290906115ef565b60405180910390fd5b6000801b6003600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101540361033357826040517f60e5a40500000000000000000000000000000000000000000000000000000000815260040161032a91906114e7565b60405180910390fd5b6003600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015491505092915050565b610398610a77565b6103a3838383610af5565b505050565b6103b0610a77565b80518251146103f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103eb9061165b565b60405180910390fd5b60005b81518110156104525761043f848483815181106104175761041661167b565b5b60200260200101518484815181106104325761043161167b565b5b6020026020010151610af5565b808061044a906116d9565b9150506103f7565b50505050565b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036104c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bf906115ef565b60405180910390fd5b6104d184610d35565b610510576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105079061176d565b60405180910390fd5b61051a8484610d8a565b610559576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610550906117d9565b60405180910390fd5b60017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016105b491906114e7565b602060405180830381865afa1580156105d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f5919061180e565b14610635576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062c90611887565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016106a591906110bd565b602060405180830381865afa1580156106c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e691906118bc565b73ffffffffffffffffffffffffffffffffffffffff161461073c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073390611935565b60405180910390fd5b60016003600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008282546107a09190611955565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fcca991b85846040518363ffffffff1660e01b8152600401610802929190611989565b600060405180830381600087803b15801561081c57600080fd5b505af1158015610830573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16847f10a412bf229fbac2408912cb271b8ff9eb39eb72da91dd0c8accab0fb101113560405160405180910390a350505050565b610886610a77565b6108906000610dfd565b565b61089a610a77565b6108a5838383610ec1565b6000604051806060016040528085815260200184815260200183815250905080600260006108d36001610f9a565b815260200190815260200160002060008201518160000155602082015181600101556040820151816002015590505061090c6001610fa8565b7f0c678bc544e0dea7af707a389bef269590eb79358a3fed2d457ff671b188d58784848460405161093f939291906119b2565b60405180910390a150505050565b7f40118949c6cba9e12fbf5d8eaee59ab938d3caf473fb213ac9233863f270c3e481565b7ffee2a06006e017d550b5fe2094312a8c4391962e4eb26b60da9a39d8408cd20581565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006109ed82610d35565b9050919050565b6109fc610a77565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6290611a5b565b60405180910390fd5b610a7481610dfd565b50565b610a7f610fbe565b73ffffffffffffffffffffffffffffffffffffffff16610a9d610995565b73ffffffffffffffffffffffffffffffffffffffff1614610af3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aea90611ac7565b60405180910390fd5b565b610afd610a77565b42600260008581526020019081526020016000206001015410158015610b385750600260008481526020019081526020016000206002015442105b610b77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6e90611b59565b60405180910390fd5b6000602060ff1611610bbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb590611bc5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2490611c57565b60405180910390fd5b600060405180606001604052808481526020017ffee2a06006e017d550b5fe2094312a8c4391962e4eb26b60da9a39d8408cd205815260200160008152509050806003600086815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050508173ffffffffffffffffffffffffffffffffffffffff167fc77a38df6f2b68b997a23e04f59bb77dffe925adffda65abed99bc2449f81a518585604051610d27929190611c77565b60405180910390a250505050565b600060026000838152602001908152602001600020600101544210158015610d725750600260008381526020019081526020016000206002015442105b15610d805760019050610d85565b600090505b919050565b60008060001b6003600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015403610df25760009050610df7565b600190505b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610ec9610a77565b6000602060ff1611610f10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0790611cec565b60405180910390fd5b81421015610f53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4a90611d58565b60405180910390fd5b808211610f95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8c90611dc4565b60405180910390fd5b505050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600033905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610fed81610fda565b8114610ff857600080fd5b50565b60008135905061100a81610fe4565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061103b82611010565b9050919050565b61104b81611030565b811461105657600080fd5b50565b60008135905061106881611042565b92915050565b6000806040838503121561108557611084610fd0565b5b600061109385828601610ffb565b92505060206110a485828601611059565b9150509250929050565b6110b781610fda565b82525050565b60006020820190506110d260008301846110ae565b92915050565b6000819050919050565b6110eb816110d8565b81146110f657600080fd5b50565b600081359050611108816110e2565b92915050565b60008060006060848603121561112757611126610fd0565b5b600061113586828701610ffb565b9350506020611146868287016110f9565b925050604061115786828701611059565b9150509250925092565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6111af82611166565b810181811067ffffffffffffffff821117156111ce576111cd611177565b5b80604052505050565b60006111e1610fc6565b90506111ed82826111a6565b919050565b600067ffffffffffffffff82111561120d5761120c611177565b5b602082029050602081019050919050565b600080fd5b6000611236611231846111f2565b6111d7565b905080838252602082019050602084028301858111156112595761125861121e565b5b835b81811015611282578061126e88826110f9565b84526020840193505060208101905061125b565b5050509392505050565b600082601f8301126112a1576112a0611161565b5b81356112b1848260208601611223565b91505092915050565b600067ffffffffffffffff8211156112d5576112d4611177565b5b602082029050602081019050919050565b60006112f96112f4846112ba565b6111d7565b9050808382526020820190506020840283018581111561131c5761131b61121e565b5b835b8181101561134557806113318882611059565b84526020840193505060208101905061131e565b5050509392505050565b600082601f83011261136457611363611161565b5b81356113748482602086016112e6565b91505092915050565b60008060006060848603121561139657611395610fd0565b5b60006113a486828701610ffb565b935050602084013567ffffffffffffffff8111156113c5576113c4610fd5565b5b6113d18682870161128c565b925050604084013567ffffffffffffffff8111156113f2576113f1610fd5565b5b6113fe8682870161134f565b9150509250925092565b60008060006060848603121561142157611420610fd0565b5b600061142f86828701610ffb565b935050602061144086828701611059565b925050604061145186828701610ffb565b9150509250925092565b60008060006060848603121561147457611473610fd0565b5b6000611482868287016110f9565b935050602061149386828701610ffb565b92505060406114a486828701610ffb565b9150509250925092565b6114b7816110d8565b82525050565b60006020820190506114d260008301846114ae565b92915050565b6114e181611030565b82525050565b60006020820190506114fc60008301846114d8565b92915050565b60006020828403121561151857611517610fd0565b5b600061152684828501610ffb565b91505092915050565b60008115159050919050565b6115448161152f565b82525050565b600060208201905061155f600083018461153b565b92915050565b60006020828403121561157b5761157a610fd0565b5b600061158984828501611059565b91505092915050565b600082825260208201905092915050565b7f4d65746973566f74653a20496e76616c69642061646472657373000000000000600082015250565b60006115d9601a83611592565b91506115e4826115a3565b602082019050919050565b60006020820190508181036000830152611608816115cc565b9050919050565b7f4d65746973566f74653a204c656e67746873206d69736d617463680000000000600082015250565b6000611645601b83611592565b91506116508261160f565b602082019050919050565b6000602082019050818103600083015261167481611638565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006116e482610fda565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611716576117156116aa565b5b600182019050919050565b7f4d65746973566f74653a20496e76616c696420456c656374696f6e0000000000600082015250565b6000611757601b83611592565b915061176282611721565b602082019050919050565b600060208201905081810360008301526117868161174a565b9050919050565b7f4d65746973566f74653a20496e76616c69642043616e64696461746500000000600082015250565b60006117c3601c83611592565b91506117ce8261178d565b602082019050919050565b600060208201905081810360008301526117f2816117b6565b9050919050565b60008151905061180881610fe4565b92915050565b60006020828403121561182457611823610fd0565b5b6000611832848285016117f9565b91505092915050565b7f4d65746973566f74653a204e6f20766f746520616c6c6f776564000000000000600082015250565b6000611871601a83611592565b915061187c8261183b565b602082019050919050565b600060208201905081810360008301526118a081611864565b9050919050565b6000815190506118b681611042565b92915050565b6000602082840312156118d2576118d1610fd0565b5b60006118e0848285016118a7565b91505092915050565b7f4d65746973566f74653a204e6f74206f776e6572206f66207468652053425400600082015250565b600061191f601f83611592565b915061192a826118e9565b602082019050919050565b6000602082019050818103600083015261194e81611912565b9050919050565b600061196082610fda565b915061196b83610fda565b9250828201905080821115611983576119826116aa565b5b92915050565b600060408201905061199e60008301856110ae565b6119ab60208301846110ae565b9392505050565b60006060820190506119c760008301866114ae565b6119d460208301856110ae565b6119e160408301846110ae565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611a45602683611592565b9150611a50826119e9565b604082019050919050565b60006020820190508181036000830152611a7481611a38565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611ab1602083611592565b9150611abc82611a7b565b602082019050919050565b60006020820190508181036000830152611ae081611aa4565b9050919050565b7f4d65746973566f74653a20456c656374696f6e206e6f206c6f6e67657220766160008201527f6c69640000000000000000000000000000000000000000000000000000000000602082015250565b6000611b43602383611592565b9150611b4e82611ae7565b604082019050919050565b60006020820190508181036000830152611b7281611b36565b9050919050565b7f4d65746973566f74653a20496e76616c69642070617274790000000000000000600082015250565b6000611baf601883611592565b9150611bba82611b79565b602082019050919050565b60006020820190508181036000830152611bde81611ba2565b9050919050565b7f4d65746973566f74653a20496e76616c69642063616e6469646174652061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611c41602483611592565b9150611c4c82611be5565b604082019050919050565b60006020820190508181036000830152611c7081611c34565b9050919050565b6000604082019050611c8c60008301856110ae565b611c9960208301846114ae565b9392505050565b7f4d65746973566f74653a20496e76616c696420706f736974696f6e0000000000600082015250565b6000611cd6601b83611592565b9150611ce182611ca0565b602082019050919050565b60006020820190508181036000830152611d0581611cc9565b9050919050565b7f4d65746973566f74653a20496e76616c69642073746172742074696d65000000600082015250565b6000611d42601d83611592565b9150611d4d82611d0c565b602082019050919050565b60006020820190508181036000830152611d7181611d35565b9050919050565b7f4d65746973566f74653a20496e76616c696420656e642074696d650000000000600082015250565b6000611dae601b83611592565b9150611db982611d78565b602082019050919050565b60006020820190508181036000830152611ddd81611da1565b905091905056fea264697066735822122037e597522d1272f0f8e06ac84dcbdf43a97eb5a7efb287b765c2a1d65baaaf0b64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80637f001325116100715780637f001325146101635780638351af23146101815780638da5cb5b1461019f578063c9d2c45c146101bd578063e54c7857146101db578063f2fde38b1461020b576100b4565b806305ea879c146100b9578063148b3005146100e957806340557d34146101055780634de8737c14610121578063715018a61461013d5780637a2d231114610147575b600080fd5b6100d360048036038101906100ce919061106e565b610227565b6040516100e091906110bd565b60405180910390f35b61010360048036038101906100fe919061110e565b610390565b005b61011f600480360381019061011a919061137d565b6103a8565b005b61013b60048036038101906101369190611408565b610458565b005b61014561087e565b005b610161600480360381019061015c919061145b565b610892565b005b61016b61094d565b60405161017891906114bd565b60405180910390f35b610189610971565b60405161019691906114bd565b60405180910390f35b6101a7610995565b6040516101b491906114e7565b60405180910390f35b6101c56109be565b6040516101d291906114e7565b60405180910390f35b6101f560048036038101906101f09190611502565b6109e2565b604051610202919061154a565b60405180910390f35b61022560048036038101906102209190611565565b6109f4565b005b600081600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610299576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610290906115ef565b60405180910390fd5b6000801b6003600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101540361033357826040517f60e5a40500000000000000000000000000000000000000000000000000000000815260040161032a91906114e7565b60405180910390fd5b6003600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015491505092915050565b610398610a77565b6103a3838383610af5565b505050565b6103b0610a77565b80518251146103f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103eb9061165b565b60405180910390fd5b60005b81518110156104525761043f848483815181106104175761041661167b565b5b60200260200101518484815181106104325761043161167b565b5b6020026020010151610af5565b808061044a906116d9565b9150506103f7565b50505050565b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036104c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bf906115ef565b60405180910390fd5b6104d184610d35565b610510576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105079061176d565b60405180910390fd5b61051a8484610d8a565b610559576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610550906117d9565b60405180910390fd5b60017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016105b491906114e7565b602060405180830381865afa1580156105d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f5919061180e565b14610635576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062c90611887565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016106a591906110bd565b602060405180830381865afa1580156106c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e691906118bc565b73ffffffffffffffffffffffffffffffffffffffff161461073c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073390611935565b60405180910390fd5b60016003600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008282546107a09190611955565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fcca991b85846040518363ffffffff1660e01b8152600401610802929190611989565b600060405180830381600087803b15801561081c57600080fd5b505af1158015610830573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16847f10a412bf229fbac2408912cb271b8ff9eb39eb72da91dd0c8accab0fb101113560405160405180910390a350505050565b610886610a77565b6108906000610dfd565b565b61089a610a77565b6108a5838383610ec1565b6000604051806060016040528085815260200184815260200183815250905080600260006108d36001610f9a565b815260200190815260200160002060008201518160000155602082015181600101556040820151816002015590505061090c6001610fa8565b7f0c678bc544e0dea7af707a389bef269590eb79358a3fed2d457ff671b188d58784848460405161093f939291906119b2565b60405180910390a150505050565b7f40118949c6cba9e12fbf5d8eaee59ab938d3caf473fb213ac9233863f270c3e481565b7ffee2a06006e017d550b5fe2094312a8c4391962e4eb26b60da9a39d8408cd20581565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006109ed82610d35565b9050919050565b6109fc610a77565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6290611a5b565b60405180910390fd5b610a7481610dfd565b50565b610a7f610fbe565b73ffffffffffffffffffffffffffffffffffffffff16610a9d610995565b73ffffffffffffffffffffffffffffffffffffffff1614610af3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aea90611ac7565b60405180910390fd5b565b610afd610a77565b42600260008581526020019081526020016000206001015410158015610b385750600260008481526020019081526020016000206002015442105b610b77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6e90611b59565b60405180910390fd5b6000602060ff1611610bbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb590611bc5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2490611c57565b60405180910390fd5b600060405180606001604052808481526020017ffee2a06006e017d550b5fe2094312a8c4391962e4eb26b60da9a39d8408cd205815260200160008152509050806003600086815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050508173ffffffffffffffffffffffffffffffffffffffff167fc77a38df6f2b68b997a23e04f59bb77dffe925adffda65abed99bc2449f81a518585604051610d27929190611c77565b60405180910390a250505050565b600060026000838152602001908152602001600020600101544210158015610d725750600260008381526020019081526020016000206002015442105b15610d805760019050610d85565b600090505b919050565b60008060001b6003600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015403610df25760009050610df7565b600190505b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610ec9610a77565b6000602060ff1611610f10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0790611cec565b60405180910390fd5b81421015610f53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4a90611d58565b60405180910390fd5b808211610f95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8c90611dc4565b60405180910390fd5b505050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600033905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610fed81610fda565b8114610ff857600080fd5b50565b60008135905061100a81610fe4565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061103b82611010565b9050919050565b61104b81611030565b811461105657600080fd5b50565b60008135905061106881611042565b92915050565b6000806040838503121561108557611084610fd0565b5b600061109385828601610ffb565b92505060206110a485828601611059565b9150509250929050565b6110b781610fda565b82525050565b60006020820190506110d260008301846110ae565b92915050565b6000819050919050565b6110eb816110d8565b81146110f657600080fd5b50565b600081359050611108816110e2565b92915050565b60008060006060848603121561112757611126610fd0565b5b600061113586828701610ffb565b9350506020611146868287016110f9565b925050604061115786828701611059565b9150509250925092565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6111af82611166565b810181811067ffffffffffffffff821117156111ce576111cd611177565b5b80604052505050565b60006111e1610fc6565b90506111ed82826111a6565b919050565b600067ffffffffffffffff82111561120d5761120c611177565b5b602082029050602081019050919050565b600080fd5b6000611236611231846111f2565b6111d7565b905080838252602082019050602084028301858111156112595761125861121e565b5b835b81811015611282578061126e88826110f9565b84526020840193505060208101905061125b565b5050509392505050565b600082601f8301126112a1576112a0611161565b5b81356112b1848260208601611223565b91505092915050565b600067ffffffffffffffff8211156112d5576112d4611177565b5b602082029050602081019050919050565b60006112f96112f4846112ba565b6111d7565b9050808382526020820190506020840283018581111561131c5761131b61121e565b5b835b8181101561134557806113318882611059565b84526020840193505060208101905061131e565b5050509392505050565b600082601f83011261136457611363611161565b5b81356113748482602086016112e6565b91505092915050565b60008060006060848603121561139657611395610fd0565b5b60006113a486828701610ffb565b935050602084013567ffffffffffffffff8111156113c5576113c4610fd5565b5b6113d18682870161128c565b925050604084013567ffffffffffffffff8111156113f2576113f1610fd5565b5b6113fe8682870161134f565b9150509250925092565b60008060006060848603121561142157611420610fd0565b5b600061142f86828701610ffb565b935050602061144086828701611059565b925050604061145186828701610ffb565b9150509250925092565b60008060006060848603121561147457611473610fd0565b5b6000611482868287016110f9565b935050602061149386828701610ffb565b92505060406114a486828701610ffb565b9150509250925092565b6114b7816110d8565b82525050565b60006020820190506114d260008301846114ae565b92915050565b6114e181611030565b82525050565b60006020820190506114fc60008301846114d8565b92915050565b60006020828403121561151857611517610fd0565b5b600061152684828501610ffb565b91505092915050565b60008115159050919050565b6115448161152f565b82525050565b600060208201905061155f600083018461153b565b92915050565b60006020828403121561157b5761157a610fd0565b5b600061158984828501611059565b91505092915050565b600082825260208201905092915050565b7f4d65746973566f74653a20496e76616c69642061646472657373000000000000600082015250565b60006115d9601a83611592565b91506115e4826115a3565b602082019050919050565b60006020820190508181036000830152611608816115cc565b9050919050565b7f4d65746973566f74653a204c656e67746873206d69736d617463680000000000600082015250565b6000611645601b83611592565b91506116508261160f565b602082019050919050565b6000602082019050818103600083015261167481611638565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006116e482610fda565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611716576117156116aa565b5b600182019050919050565b7f4d65746973566f74653a20496e76616c696420456c656374696f6e0000000000600082015250565b6000611757601b83611592565b915061176282611721565b602082019050919050565b600060208201905081810360008301526117868161174a565b9050919050565b7f4d65746973566f74653a20496e76616c69642043616e64696461746500000000600082015250565b60006117c3601c83611592565b91506117ce8261178d565b602082019050919050565b600060208201905081810360008301526117f2816117b6565b9050919050565b60008151905061180881610fe4565b92915050565b60006020828403121561182457611823610fd0565b5b6000611832848285016117f9565b91505092915050565b7f4d65746973566f74653a204e6f20766f746520616c6c6f776564000000000000600082015250565b6000611871601a83611592565b915061187c8261183b565b602082019050919050565b600060208201905081810360008301526118a081611864565b9050919050565b6000815190506118b681611042565b92915050565b6000602082840312156118d2576118d1610fd0565b5b60006118e0848285016118a7565b91505092915050565b7f4d65746973566f74653a204e6f74206f776e6572206f66207468652053425400600082015250565b600061191f601f83611592565b915061192a826118e9565b602082019050919050565b6000602082019050818103600083015261194e81611912565b9050919050565b600061196082610fda565b915061196b83610fda565b9250828201905080821115611983576119826116aa565b5b92915050565b600060408201905061199e60008301856110ae565b6119ab60208301846110ae565b9392505050565b60006060820190506119c760008301866114ae565b6119d460208301856110ae565b6119e160408301846110ae565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611a45602683611592565b9150611a50826119e9565b604082019050919050565b60006020820190508181036000830152611a7481611a38565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611ab1602083611592565b9150611abc82611a7b565b602082019050919050565b60006020820190508181036000830152611ae081611aa4565b9050919050565b7f4d65746973566f74653a20456c656374696f6e206e6f206c6f6e67657220766160008201527f6c69640000000000000000000000000000000000000000000000000000000000602082015250565b6000611b43602383611592565b9150611b4e82611ae7565b604082019050919050565b60006020820190508181036000830152611b7281611b36565b9050919050565b7f4d65746973566f74653a20496e76616c69642070617274790000000000000000600082015250565b6000611baf601883611592565b9150611bba82611b79565b602082019050919050565b60006020820190508181036000830152611bde81611ba2565b9050919050565b7f4d65746973566f74653a20496e76616c69642063616e6469646174652061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611c41602483611592565b9150611c4c82611be5565b604082019050919050565b60006020820190508181036000830152611c7081611c34565b9050919050565b6000604082019050611c8c60008301856110ae565b611c9960208301846114ae565b9392505050565b7f4d65746973566f74653a20496e76616c696420706f736974696f6e0000000000600082015250565b6000611cd6601b83611592565b9150611ce182611ca0565b602082019050919050565b60006020820190508181036000830152611d0581611cc9565b9050919050565b7f4d65746973566f74653a20496e76616c69642073746172742074696d65000000600082015250565b6000611d42601d83611592565b9150611d4d82611d0c565b602082019050919050565b60006020820190508181036000830152611d7181611d35565b9050919050565b7f4d65746973566f74653a20496e76616c696420656e642074696d650000000000600082015250565b6000611dae601b83611592565b9150611db982611d78565b602082019050919050565b60006020820190508181036000830152611ddd81611da1565b905091905056fea264697066735822122037e597522d1272f0f8e06ac84dcbdf43a97eb5a7efb287b765c2a1d65baaaf0b64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/MetisVote.sol:MetisVote",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3418,
        "contract": "contracts/MetisVote.sol:MetisVote",
        "label": "_electionIdCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)1683_storage"
      },
      {
        "astId": 3433,
        "contract": "contracts/MetisVote.sol:MetisVote",
        "label": "elections",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Election)3957_storage)"
      },
      {
        "astId": 3440,
        "contract": "contracts/MetisVote.sol:MetisVote",
        "label": "candidates",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Candidate)3950_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Candidate)3950_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IMetisVote.Candidate)",
        "numberOfBytes": "32",
        "value": "t_struct(Candidate)3950_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Candidate)3950_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct IMetisVote.Candidate))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Candidate)3950_storage)"
      },
      "t_mapping(t_uint256,t_struct(Election)3957_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IMetisVote.Election)",
        "numberOfBytes": "32",
        "value": "t_struct(Election)3957_storage"
      },
      "t_struct(Candidate)3950_storage": {
        "encoding": "inplace",
        "label": "struct IMetisVote.Candidate",
        "members": [
          {
            "astId": 3945,
            "contract": "contracts/MetisVote.sol:MetisVote",
            "label": "party",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 3947,
            "contract": "contracts/MetisVote.sol:MetisVote",
            "label": "status",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 3949,
            "contract": "contracts/MetisVote.sol:MetisVote",
            "label": "votes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Counter)1683_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1682,
            "contract": "contracts/MetisVote.sol:MetisVote",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Election)3957_storage": {
        "encoding": "inplace",
        "label": "struct IMetisVote.Election",
        "members": [
          {
            "astId": 3952,
            "contract": "contracts/MetisVote.sol:MetisVote",
            "label": "position",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 3954,
            "contract": "contracts/MetisVote.sol:MetisVote",
            "label": "startTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3956,
            "contract": "contracts/MetisVote.sol:MetisVote",
            "label": "endTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}